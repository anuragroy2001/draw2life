'use client';

import React, { useState } from 'react';
import { aiService, FALImageGenerationResult } from '@/lib/ai-service';

interface AIImageGeneratorProps {
  onImageGenerated?: (imageData: string) => void;
  className?: string;
}

export default function AIImageGenerator({ onImageGenerated, className = '' }: AIImageGeneratorProps) {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [generationResult, setGenerationResult] = useState<FALImageGenerationResult | null>(null);

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      setError('Please enter a prompt');
      return;
    }

    setIsGenerating(true);
    setError(null);
    setGeneratedImage(null);

    try {
      const result = await aiService.generateImage(prompt, {
        syncMode: true,
        numInferenceSteps: 4,
        guidanceScale: 1.0,
      });

      setGenerationResult(result);

      if (result.images && result.images.length > 0) {
        const image = result.images[0];
        const dataUrl = aiService.convertImageToDataUrl(image.content, image.content_type);
        setGeneratedImage(dataUrl);
        
        if (onImageGenerated) {
          onImageGenerated(dataUrl);
        }
      } else {
        setError('No images generated');
      }
    } catch (err) {
      console.error('Image generation error:', err);
      setError(err instanceof Error ? err.message : 'Failed to generate image');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleClear = () => {
    setPrompt('');
    setGeneratedImage(null);
    setGenerationResult(null);
    setError(null);
  };

  return (
    <div className={`glass-card p-6 rounded-xl ${className}`}>
      <h3 className="text-xl font-bold mb-6 text-white">ðŸŽ¨ AI Image Generator</h3>
      
      <div className="space-y-6">
        <div>
          <label htmlFor="prompt" className="block text-sm font-medium text-white/80 mb-3">
            Describe the image you want to generate:
          </label>
          <textarea
            id="prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="e.g., a colorful castle with a rainbow, friendly dragons, and happy children playing"
            className="w-full p-4 bg-gray-800/50 border border-white/20 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-400 resize-none text-white placeholder-white/50"
            rows={3}
            disabled={isGenerating}
          />
        </div>

        <div className="flex gap-3">
          <button
            onClick={handleGenerate}
            disabled={isGenerating || !prompt.trim()}
            className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl hover:from-blue-600 hover:to-blue-700 disabled:bg-gray-800/50 disabled:text-white/40 disabled:cursor-not-allowed flex items-center gap-2 transition-all duration-300 hover:scale-105 shadow-lg"
          >
            {isGenerating ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                Generating...
              </>
            ) : (
              'Generate Image'
            )}
          </button>
          
          <button
            onClick={handleClear}
            disabled={isGenerating}
            className="px-4 py-3 bg-gray-700/50 text-white rounded-xl hover:bg-gray-600/50 disabled:bg-gray-800/50 disabled:text-white/40 disabled:cursor-not-allowed transition-all duration-300 hover:scale-105"
          >
            Clear
          </button>
        </div>

        {error && (
          <div className="p-4 bg-red-500/10 border border-red-500/20 text-red-400 rounded-xl">
            {error}
          </div>
        )}

        {generatedImage && (
          <div className="space-y-6">
            <h4 className="text-lg font-semibold text-white">âœ¨ Generated Image:</h4>
            <div className="glass-card border border-white/20 rounded-xl overflow-hidden">
              <img
                src={generatedImage}
                alt="Generated by AI"
                className="w-full h-auto max-w-md mx-auto"
              />
            </div>
            
            {generationResult && (
              <div className="glass-card p-4 rounded-xl">
                <h5 className="text-sm font-medium text-white mb-3">Generation Details:</h5>
                <div className="grid grid-cols-3 gap-4 text-xs">
                  <div className="text-center">
                    <div className="text-blue-400 font-mono">{generationResult.timings?.inference?.toFixed(2)}s</div>
                    <div className="text-white/60">Time</div>
                  </div>
                  <div className="text-center">
                    <div className="text-green-400 font-mono">{generationResult.seed}</div>
                    <div className="text-white/60">Seed</div>
                  </div>
                  <div className="text-center">
                    <div className={generationResult.has_nsfw_concepts ? "text-red-400" : "text-green-400"}>
                      {generationResult.has_nsfw_concepts ? 'Yes' : 'No'}
                    </div>
                    <div className="text-white/60">NSFW</div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
